File: unaryMinus.kt - b2ebc15f69bc8f96be4a3100044042d3
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("b")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            whenExpression
              WHEN("when")
              whenSubject
                LPAREN("(")
                expression
                  simpleIdentifier
                    Identifier("a")
                RPAREN(")")
              LCURL("{")
              NL("\n")
              whenEntry
                whenCondition
                  expression
                    unaryPrefix
                      prefixUnaryOperator
                        SUB("-")
                      NL("\n")
                    expression
                      simpleIdentifier
                        Identifier("b")
                ARROW("->")
                controlStructureBody
                  statement
                    expression
                      literalConstant
                        IntegerLiteral("1")
                semi
                  NL("\n")
              whenEntry
                ELSE("else")
                ARROW("->")
                controlStructureBody
                  statement
                    expression
                      literalConstant
                        IntegerLiteral("2")
                semi
                  NL("\n")
              RCURL("}")
    semis
      EOF("<EOF>")
  EOF("<EOF>")
