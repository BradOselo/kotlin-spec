File: functionLiterals.kt - b87b5c717cc9e3a8f5e315a8913f0abb
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("Foo")
    semis
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("Bar")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("a")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameterModifiers
              parameterModifier
                VARARG("vararg")
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Any")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            simpleIdentifier
              Identifier("a")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  expression
                    simpleIdentifier
                      Identifier("a")
                  unarySuffix
                    callSuffix
                      valueArguments
                        LPAREN("(")
                        valueArgument
                          expression
                            literalConstant
                              IntegerLiteral("1")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                statements
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                ARROW("->")
                                statements
                                  statement
                                    expression
                                      literalConstant
                                        IntegerLiteral("1")
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                statements
                                  statement
                                    expression
                                      literalConstant
                                        IntegerLiteral("1")
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                statements
                                  statement
                                    expression
                                      simpleIdentifier
                                        Identifier("x")
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                ARROW("->")
                                statements
                                  statement
                                    expression
                                      literalConstant
                                        IntegerLiteral("1")
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                lambdaParameters
                                  lambdaParameter
                                    variableDeclaration
                                      simpleIdentifier
                                        Identifier("x")
                                ARROW("->")
                                statements
                                  statement
                                    expression
                                      literalConstant
                                        IntegerLiteral("1")
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                lambdaParameters
                                  lambdaParameter
                                    variableDeclaration
                                      simpleIdentifier
                                        Identifier("x")
                                  COMMA(",")
                                  lambdaParameter
                                    variableDeclaration
                                      simpleIdentifier
                                        Identifier("y")
                                ARROW("->")
                                statements
                                  statement
                                    expression
                                      literalConstant
                                        IntegerLiteral("1")
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                lambdaParameters
                                  lambdaParameter
                                    variableDeclaration
                                      simpleIdentifier
                                        Identifier("x")
                                ARROW("->")
                                statements
                                  statement
                                    expression
                                      literalConstant
                                        IntegerLiteral("1")
                                RCURL("}")
                        COMMA(",")
                        valueArgument
                          expression
                            functionLiteral
                              lambdaLiteral
                                LCURL("{")
                                statements
                                  statement
                                    expression
                                      parenthesizedExpression
                                        LPAREN("(")
                                        expression
                                          simpleIdentifier
                                            Identifier("x")
                                        RPAREN(")")
                                RCURL("}")
                        RPAREN(")")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
