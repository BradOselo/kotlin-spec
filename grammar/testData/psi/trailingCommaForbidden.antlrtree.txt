File: trailingCommaForbidden.kt - 7c0c90922ab66594c21ac6eb57d48a1c
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("A1")
          COMMA(",")
          annotatedDelegationSpecifier
            delegationSpecifier
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("A2")
  COMMA(",")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T1")
          COMMA(",")
          typeParameter
            simpleIdentifier
              Identifier("T2")
          RANGLE(">")
        typeConstraints
          WHERE("where")
          NL("\n")
          typeConstraint
            simpleIdentifier
              Identifier("T1")
            COLON(":")
            type
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Comparable")
                    typeArguments
                      LANGLE("<")
                      typeProjection
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("Comparable")
                                typeArguments
                                  LANGLE("<")
                                  typeProjection
                                    type
                                      typeReference
                                        userType
                                          simpleUserType
                                            simpleIdentifier
                                              Identifier("Number")
                                  RANGLE(">")
                      RANGLE(">")
          COMMA(",")
          NL("\n")
          typeConstraint
            simpleIdentifier
              Identifier("T2")
            COLON(":")
            type
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Iterable")
                    typeArguments
                      LANGLE("<")
                      typeProjection
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("Iterable")
                                typeArguments
                                  LANGLE("<")
                                  typeProjection
                                    type
                                      typeReference
                                        userType
                                          simpleUserType
                                            simpleIdentifier
                                              Identifier("Number")
                                  RANGLE(">")
                      RANGLE(">")
  COMMA(",")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              VAL("val")
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("String")
            COMMA(",")
            classParameter
              VAL("val")
              simpleIdentifier
                Identifier("y")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("String")
            COMMA(",")
            COMMA(",")
            RPAREN(")")
  LCURL("{")
  NL("\n")
  CONSTRUCTOR("constructor")
  LPAREN("(")
  COMMA(",")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Int")
  COMMA(",")
  Identifier("y")
  COLON(":")
  Identifier("Number")
  COMMA(",")
  COMMA(",")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("listOf")
  LPAREN("(")
  Identifier("foo")
  DOT(".")
  Identifier("bar")
  DOT(".")
  Identifier("something")
  LPAREN("(")
  RPAREN(")")
  COMMA(",")
  QUOTE_OPEN(""")
  LineStrText("foo bar something")
  QUOTE_CLOSE(""")
  COMMA(",")
  COMMA(",")
  RPAREN(")")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("listOf")
  LPAREN("(")
  Identifier("foo")
  DOT(".")
  Identifier("bar")
  DOT(".")
  Identifier("something")
  LPAREN("(")
  RPAREN(")")
  COMMA(",")
  COMMA(",")
  QUOTE_OPEN(""")
  LineStrText("foo bar something")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("listOf")
  LPAREN("(")
  Identifier("foo")
  DOT(".")
  Identifier("bar")
  DOT(".")
  Identifier("something")
  LPAREN("(")
  RPAREN(")")
  COMMA(",")
  COMMA(",")
  QUOTE_OPEN(""")
  LineStrText("foo bar something")
  QUOTE_CLOSE(""")
  COMMA(",")
  RPAREN(")")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("x")
  ASSIGNMENT("=")
  Identifier("x")
  LSQUARE("[")
  IntegerLiteral("1")
  COMMA(",")
  IntegerLiteral("3")
  COMMA(",")
  COMMA(",")
  RSQUARE("]")
  NL("\n")
  VAL("val")
  Identifier("y")
  ASSIGNMENT("=")
  Identifier("x")
  LSQUARE("[")
  COMMA(",")
  RSQUARE("]")
  NL("\n")
  VAL("val")
  Identifier("z1")
  ASSIGNMENT("=")
  Identifier("x")
  LSQUARE("[")
  COMMA(",")
  IntegerLiteral("1")
  RSQUARE("]")
  NL("\n")
  VAL("val")
  Identifier("z2")
  ASSIGNMENT("=")
  Identifier("x")
  LSQUARE("[")
  COMMA(",")
  COMMA(",")
  IntegerLiteral("1")
  RSQUARE("]")
  NL("\n")
  VAL("val")
  Identifier("z3")
  ASSIGNMENT("=")
  Identifier("x")
  LSQUARE("[")
  COMMA(",")
  IntegerLiteral("1")
  COMMA(",")
  RSQUARE("]")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("main")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("x")
  ASSIGNMENT("=")
  LCURL("{")
  Identifier("x")
  COLON(":")
  Identifier("Comparable")
  LANGLE("<")
  Identifier("Comparable")
  LANGLE("<")
  Identifier("Number")
  RANGLE(">")
  RANGLE(">")
  COMMA(",")
  NL("\n")
  Identifier("y")
  COLON(":")
  Identifier("Iterable")
  LANGLE("<")
  Identifier("Iterable")
  LANGLE("<")
  Identifier("Number")
  RANGLE(">")
  RANGLE(">")
  COMMA(",")
  NL("\n")
  COMMA(",")
  ARROW("->")
  NL("\n")
  Identifier("println")
  LPAREN("(")
  QUOTE_OPEN(""")
  LineStrText("1")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  VAL("val")
  Identifier("y")
  ASSIGNMENT("=")
  LCURL("{")
  COMMA(",")
  ARROW("->")
  NL("\n")
  Identifier("println")
  LPAREN("(")
  QUOTE_OPEN(""")
  LineStrText("1")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  VAL("val")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("Pair")
  LPAREN("(")
  IntegerLiteral("1")
  COMMA(",")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  VAL("val")
  LPAREN("(")
  COMMA(",")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("Pair")
  LPAREN("(")
  IntegerLiteral("1")
  COMMA(",")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Any")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("Comparable")
  COLONCOLON("::")
  CLASS("class")
  COMMA(",")
  NL("\n")
  Identifier("Iterable")
  COLONCOLON("::")
  CLASS("class")
  COMMA(",")
  NL("\n")
  Identifier("String")
  COLONCOLON("::")
  CLASS("class")
  COMMA(",")
  NL("\n")
  COMMA(",")
  NL("\n")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Any")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  COMMA(",")
  Identifier("Comparable")
  COLONCOLON("::")
  CLASS("class")
  COMMA(",")
  NL("\n")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Any")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  COMMA(",")
  Identifier("Comparable")
  COLONCOLON("::")
  CLASS("class")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Any")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  COMMA(",")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Any")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  BooleanLiteral("true")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  COMMA(",")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Any")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  BooleanLiteral("true")
  COMMA(",")
  COMMA(",")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  ARROW("->")
  Identifier("println")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("foo")
  LPAREN("(")
  COMMA(",")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("foo")
  LCURL("{")
  RCURL("}")
  COMMA(",")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("foo")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  COMMA(",")
  NL("\n")
  NL("\n")
  FUN("fun")
  LANGLE("<")
  Identifier("T")
  COMMA(",")
  COLON(":")
  Identifier("Number")
  RANGLE(">")
  Identifier("foo10")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  FUN("fun")
  LANGLE("<")
  Identifier("T1")
  COMMA(",")
  Identifier("T2")
  COMMA(",")
  Identifier("T3")
  COMMA(",")
  COLON(":")
  Identifier("Comparable")
  LANGLE("<")
  Identifier("Int")
  RANGLE(">")
  RANGLE(">")
  Identifier("foo10")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IntegerLiteral("1")
  COMMA(",")
  COMMA(",")
  ARROW("->")
  NullLiteral("null")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  LANGLE("<")
  Identifier("T1")
  COMMA(",")
  Identifier("T2")
  COMMA(",")
  COMMA(",")
  RANGLE(">")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
