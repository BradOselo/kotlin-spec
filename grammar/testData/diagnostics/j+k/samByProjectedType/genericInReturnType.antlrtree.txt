File: genericInReturnType.kt - 3aaa762b4d2800f58cf3a5fb0eac7ba6
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            visibilityModifier
              PUBLIC("public")
        INTERFACE("interface")
        simpleIdentifier
          Identifier("EventListener")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("E")
          RANGLE(">")
  LCURL("{")
  NL("\n")
  Identifier("E")
  Identifier("handle")
  LPAREN("(")
  Identifier("String")
  Identifier("x")
  RPAREN(")")
  SEMICOLON(";")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            visibilityModifier
              PUBLIC("public")
        CLASS("class")
        simpleIdentifier
          Identifier("A")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("void")
      Identifier("foo")
      LPAREN("(")
      Identifier("EventListener")
      LANGLE("<")
      QUEST_NO_WS("?")
      RANGLE(">")
      Identifier("l")
      RPAREN(")")
      LCURL("{")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("static")
      Identifier("void")
      Identifier("bar")
      LPAREN("(")
      Identifier("EventListener")
      LANGLE("<")
      QUEST_NO_WS("?")
      RANGLE(">")
      Identifier("l")
      RPAREN(")")
      LCURL("{")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("static")
      Identifier("void")
      Identifier("baz")
      LPAREN("(")
      Identifier("EventListener")
      LANGLE("<")
      QUEST_WS("? ")
      Identifier("extends")
      Identifier("CharSequence")
      RANGLE(">")
      Identifier("l")
      RPAREN(")")
      LCURL("{")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("main")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  DOT(".")
  Identifier("foo")
  LCURL("{")
  NL("\n")
  Identifier("x")
  ARROW("->")
  Identifier("x")
  DOT(".")
  Identifier("hashCode")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("A")
  DOT(".")
  Identifier("bar")
  LCURL("{")
  NL("\n")
  Identifier("x")
  ARROW("->")
  Identifier("x")
  DOT(".")
  Identifier("hashCode")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  Identifier("A")
  DOT(".")
  Identifier("baz")
  LCURL("{")
  NL("\n")
  Identifier("x")
  ARROW("->")
  Identifier("x")
  DOT(".")
  Identifier("toString")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("A")
  DOT(".")
  Identifier("baz")
  LCURL("{")
  NL("\n")
  Identifier("x")
  ARROW("->")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("x")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("hashCode")
  LPAREN("(")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("block")
          COLON(":")
          type
            functionType
              functionTypeParameters
                LPAREN("(")
                type
                  typeReference
                    userType
                      simpleUserType
                        simpleIdentifier
                          Identifier("String")
                RPAREN(")")
              ARROW("->")
              type
                nullableType
                  typeReference
                    userType
                      simpleUserType
                        simpleIdentifier
                          Identifier("Any")
                  quest
                    QUEST_WS("? ")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      functionLiteral
                                        lambdaLiteral
                                          LCURL("{")
                                          NL("\n")
                                          lambdaParameters
                                            lambdaParameter
                                              variableDeclaration
                                                simpleIdentifier
                                                  Identifier("x")
                                          ARROW("->")
                                          statements
                                            statement
                                              expression
                                                disjunction
                                                  conjunction
                                                    equality
                                                      comparison
                                                        infixOperation
                                                          elvisExpression
                                                            infixFunctionCall
                                                              rangeExpression
                                                                additiveExpression
                                                                  multiplicativeExpression
                                                                    asExpression
                                                                      prefixUnaryExpression
                                                                        postfixUnaryExpression
                                                                          primaryExpression
                                                                            simpleIdentifier
                                                                              Identifier("x")
                                                                          postfixUnarySuffix
                                                                            navigationSuffix
                                                                              memberAccessOperator
                                                                                DOT(".")
                                                                              simpleIdentifier
                                                                                Identifier("hashCode")
                                                                          postfixUnarySuffix
                                                                            callSuffix
                                                                              valueArguments
                                                                                LPAREN("(")
                                                                                RPAREN(")")
                                            semis
                                              NL("\n")
                                          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  Identifier("block")
  RPAREN(")")
  NL("\n")
  Identifier("A")
  DOT(".")
  Identifier("bar")
  LPAREN("(")
  Identifier("block")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("block2")
          COLON(":")
          type
            functionType
              functionTypeParameters
                LPAREN("(")
                type
                  typeReference
                    userType
                      simpleUserType
                        simpleIdentifier
                          Identifier("String")
                RPAREN(")")
              ARROW("->")
              type
                nullableType
                  typeReference
                    userType
                      simpleUserType
                        simpleIdentifier
                          Identifier("CharSequence")
                  quest
                    QUEST_WS("? ")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      functionLiteral
                                        lambdaLiteral
                                          LCURL("{")
                                          NL("\n")
                                          lambdaParameters
                                            lambdaParameter
                                              variableDeclaration
                                                simpleIdentifier
                                                  Identifier("x")
                                          ARROW("->")
                                          statements
                                            statement
                                              expression
                                                disjunction
                                                  conjunction
                                                    equality
                                                      comparison
                                                        infixOperation
                                                          elvisExpression
                                                            infixFunctionCall
                                                              rangeExpression
                                                                additiveExpression
                                                                  multiplicativeExpression
                                                                    asExpression
                                                                      prefixUnaryExpression
                                                                        postfixUnaryExpression
                                                                          primaryExpression
                                                                            simpleIdentifier
                                                                              Identifier("x")
                                                                          postfixUnarySuffix
                                                                            navigationSuffix
                                                                              memberAccessOperator
                                                                                DOT(".")
                                                                              simpleIdentifier
                                                                                Identifier("toString")
                                                                          postfixUnarySuffix
                                                                            callSuffix
                                                                              valueArguments
                                                                                LPAREN("(")
                                                                                RPAREN(")")
                                            semis
                                              NL("\n")
                                          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  Identifier("A")
  DOT(".")
  Identifier("baz")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("block")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  Identifier("A")
  DOT(".")
  Identifier("baz")
  LPAREN("(")
  Identifier("block2")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  EOF("<EOF>")
