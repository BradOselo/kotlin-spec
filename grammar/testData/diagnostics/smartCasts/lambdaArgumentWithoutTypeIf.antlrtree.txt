File: lambdaArgumentWithoutTypeIf.kt - 36a03f7e75f472b8f24960af08c3361f
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                declaration
                  propertyDeclaration
                    VAL("val")
                    variableDeclaration
                      simpleIdentifier
                        Identifier("x")
                      COLON(":")
                      type
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                    ASSIGNMENT("=")
                    expression
                      expression
                        literalConstant
                          IntegerLiteral("1")
                      unarySuffix
                        navigationSuffix
                          memberAccessOperator
                            DOT(".")
                          simpleIdentifier
                            Identifier("let")
                      unarySuffix
                        callSuffix
                          annotatedLambda
                            lambdaLiteral
                              LCURL("{")
                              NL("\n")
                              statements
                                statement
                                  declaration
                                    propertyDeclaration
                                      VAL("val")
                                      variableDeclaration
                                        simpleIdentifier
                                          Identifier("value")
                                        COLON(":")
                                        type
                                          nullableType
                                            typeReference
                                              userType
                                                simpleUserType
                                                  simpleIdentifier
                                                    Identifier("Int")
                                            quest
                                              QUEST_WS("? ")
                                      ASSIGNMENT("=")
                                      expression
                                        literalConstant
                                          NullLiteral("null")
                                semis
                                  NL("\n")
                                statement
                                  expression
                                    ifExpression
                                      IF("if")
                                      LPAREN("(")
                                      expression
                                        expression
                                          simpleIdentifier
                                            Identifier("value")
                                        equalityOperator
                                          EQEQ("==")
                                        expression
                                          literalConstant
                                            NullLiteral("null")
                                      RPAREN(")")
                                      controlStructureBody
                                        block
                                          LCURL("{")
                                          NL("\n")
                                          statements
                                            statement
                                              expression
                                                jumpExpression
                                                  RETURN_AT("return@let")
                                                  expression
                                                    literalConstant
                                                      IntegerLiteral("1")
                                            semis
                                              NL("\n")
                                          RCURL("}")
                                semis
                                  NL("\n")
                                  NL("\n")
                                statement
                                  expression
                                    simpleIdentifier
                                      Identifier("value")
                                semis
                                  NL("\n")
                              RCURL("}")
              semis
                NL("\n")
              statement
                expression
                  jumpExpression
                    RETURN("return")
                    expression
                      simpleIdentifier
                        Identifier("x")
              semis
                NL("\n")
            RCURL("}")
    semis
      EOF("<EOF>")
  EOF("<EOF>")
