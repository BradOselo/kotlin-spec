File: kt362.kt - f5b7b7693994130e436968373171dc02
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
    PACKAGE("package")
    identifier
      simpleIdentifier
        Identifier("example")
    semi
      NL("\n")
      NL("\n")
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("p")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("test")
                                    postfixUnarySuffix
                                      navigationSuffix
                                        memberAccessOperator
                                          DOT(".")
                                        simpleIdentifier
                                          Identifier("Public")
                                    postfixUnarySuffix
                                      callSuffix
                                        valueArguments
                                          LPAREN("(")
                                          RPAREN(")")
        NL("\n")
        IF("if")
        LPAREN("(")
        Identifier("p")
        DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      IS("is")
      Identifier("Int")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("DEBUG_INFO_SMARTCAST")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("p")
      DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      ADD("+")
      IntegerLiteral("1")
    semis
      NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("p")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("INVISIBLE_MEMBER")
  EXCL_NO_WS("!")
  RANGLE(">")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PROTECTED("protected")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      IS("is")
      Identifier("Int")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("DEBUG_INFO_SMARTCAST")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("p")
      DOT(".")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("INVISIBLE_MEMBER")
      EXCL_NO_WS("!")
      RANGLE(">")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PROTECTED("protected")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      ADD("+")
      IntegerLiteral("1")
    semis
      NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("p")
  DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      INTERNAL("internal")
      IS("is")
      Identifier("Int")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("DEBUG_INFO_SMARTCAST")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("p")
      DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      INTERNAL("internal")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      ADD("+")
      IntegerLiteral("1")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("i")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("test")
                                    postfixUnarySuffix
                                      navigationSuffix
                                        memberAccessOperator
                                          DOT(".")
                                        simpleIdentifier
                                          Identifier("Internal")
                                    postfixUnarySuffix
                                      callSuffix
                                        valueArguments
                                          LPAREN("(")
                                          RPAREN(")")
        NL("\n")
        IF("if")
        LPAREN("(")
        Identifier("i")
        DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      IS("is")
      Identifier("Int")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("DEBUG_INFO_SMARTCAST")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("i")
      DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      ADD("+")
      IntegerLiteral("1")
    semis
      NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("i")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("INVISIBLE_MEMBER")
  EXCL_NO_WS("!")
  RANGLE(">")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PROTECTED("protected")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      IS("is")
      Identifier("Int")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("DEBUG_INFO_SMARTCAST")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("i")
      DOT(".")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("INVISIBLE_MEMBER")
      EXCL_NO_WS("!")
      RANGLE(">")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PROTECTED("protected")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      ADD("+")
      IntegerLiteral("1")
    semis
      NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("i")
  DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      INTERNAL("internal")
      IS("is")
      Identifier("Int")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("DEBUG_INFO_SMARTCAST")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("i")
      DOT(".")
  topLevelObject
    declaration
  topLevelObject
    declaration
      INTERNAL("internal")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      ADD("+")
      IntegerLiteral("1")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  PACKAGE("package")
  Identifier("test")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            visibilityModifier
              PUBLIC("public")
        CLASS("class")
        simpleIdentifier
          Identifier("Public")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                propertyDeclaration
                  modifiers
                    modifier
                      visibilityModifier
                        PUBLIC("public")
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      PUBLIC("public")
                    COLON(":")
                    type
                      nullableType
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                        quest
                          QUEST_WS("? ")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
            semis
              SEMICOLON(";")
              NL("\n")
            classMemberDeclaration
              declaration
                propertyDeclaration
                  modifiers
                    modifier
                      visibilityModifier
                        PROTECTED("protected")
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      PROTECTED("protected")
                    COLON(":")
                    type
                      nullableType
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                        quest
                          QUEST_WS("? ")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
            semis
              SEMICOLON(";")
              NL("\n")
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      INTERNAL("internal")
                    COLON(":")
                    type
                      nullableType
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                        quest
                          QUEST_WS("? ")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
                  NL("\n")
          RCURL("}")
    semis
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            visibilityModifier
              INTERNAL("internal")
        CLASS("class")
        simpleIdentifier
          Identifier("Internal")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                propertyDeclaration
                  modifiers
                    modifier
                      visibilityModifier
                        PUBLIC("public")
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      PUBLIC("public")
                    COLON(":")
                    type
                      nullableType
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                        quest
                          QUEST_WS("? ")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
            semis
              SEMICOLON(";")
              NL("\n")
            classMemberDeclaration
              declaration
                propertyDeclaration
                  modifiers
                    modifier
                      visibilityModifier
                        PROTECTED("protected")
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      PROTECTED("protected")
                    COLON(":")
                    type
                      nullableType
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                        quest
                          QUEST_WS("? ")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
            semis
              SEMICOLON(";")
              NL("\n")
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      INTERNAL("internal")
                    COLON(":")
                    type
                      nullableType
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                        quest
                          QUEST_WS("? ")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
                  NL("\n")
          RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
