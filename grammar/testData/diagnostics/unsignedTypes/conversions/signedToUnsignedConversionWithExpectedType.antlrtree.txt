File: signedToUnsignedConversionWithExpectedType.kt - 830a2d1ed5690849d67227fe1774e21c
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("takeUByte")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("u")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("UByte")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("takeUShort")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("u")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("UShort")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("takeUInt")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("u")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("UInt")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("takeULong")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("u")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("ULong")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("takeUBytes")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameterModifiers
              parameterModifier
                VARARG("vararg")
            parameter
              simpleIdentifier
                Identifier("u")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("UByte")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("takeNullableUInt")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("u")
              COLON(":")
              type
                nullableType
                  typeReference
                    userType
                      simpleUserType
                        simpleIdentifier
                          Identifier("UInt")
                  quest
                    QUEST_NO_WS("?")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  IntegerLiteral("1")
  ADD("+")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  IntegerLiteral("1")
  DOT(".")
  Identifier("plus")
  LPAREN("(")
  IntegerLiteral("2")
  RPAREN(")")
  RPAREN(")")
  NL("\n")
  Identifier("takeNullableUInt")
  LPAREN("(")
  IntegerLiteral("4")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("Int")
  DOT(".")
  Identifier("MAX_VALUE")
  MULT("*")
  LongLiteral("2L")
  RPAREN(")")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  SUB("-")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("Int")
  DOT(".")
  Identifier("MAX_VALUE")
  MULT("*")
  LongLiteral("2L")
  ADD("+")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUByte")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  Identifier("takeUByte")
  LPAREN("(")
  IntegerLiteral("255")
  RPAREN(")")
  NL("\n")
  Identifier("takeUByte")
  LPAREN("(")
  IntegerLiteral("1")
  DOT(".")
  Identifier("toByte")
  LPAREN("(")
  RPAREN(")")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUShort")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  Identifier("takeULong")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeULong")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("INT_LITERAL_OUT_OF_RANGE")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  LCURL("{")
  Identifier("NI")
  RCURL("}")
  EXCL_NO_WS("!")
  RANGLE(">")
  IntegerLiteral("18446744073709551615")
  RPAREN(")")
  NL("\n")
  Identifier("takeULong")
  LPAREN("(")
  IntegerLiteral("1844674407370955161")
  RPAREN(")")
  NL("\n")
  Identifier("takeULong")
  LPAREN("(")
  UnsignedLiteral("18446744073709551615u")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("Int")
  DOT(".")
  Identifier("MAX_VALUE")
  MULT("*")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  IntegerLiteral("4294967294")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUBytes")
  LPAREN("(")
  IntegerLiteral("1")
  COMMA(",")
  IntegerLiteral("2")
  COMMA(",")
  IntegerLiteral("255")
  COMMA(",")
  IntegerLiteral("256")
  COMMA(",")
  IntegerLiteral("0")
  COMMA(",")
  SUB("-")
  IntegerLiteral("1")
  COMMA(",")
  IntegerLiteral("40")
  ADD("+")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  IntegerLiteral("1")
  DOT(".")
  Identifier("myPlus")
  LPAREN("(")
  IntegerLiteral("2")
  RPAREN(")")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("localVariable")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("42")
    semis
      NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("localVariable")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAR("var")
        variableDeclaration
          simpleIdentifier
            Identifier("localMutableVariable")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("42")
    semis
      NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("localMutableVariable")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("localNegativeVariable")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    unaryPrefix
                                      prefixUnaryOperator
                                        SUB("-")
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("1")
    semis
      NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("localNegativeVariable")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("globalVariable")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("constVal")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("takeUInt")
  LPAREN("(")
  Identifier("globalVariableWithGetter")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("globalVariable")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("10")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        modifiers
          modifier
            propertyModifier
              CONST("const")
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("constVal")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("10")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("globalVariableWithGetter")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
        getter
          GET("get")
          LPAREN("(")
          RPAREN(")")
          functionBody
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      genericCallLikeComparison
                        infixOperation
                          elvisExpression
                            infixFunctionCall
                              rangeExpression
                                additiveExpression
                                  multiplicativeExpression
                                    asExpression
                                      prefixUnaryExpression
                                        postfixUnaryExpression
                                          primaryExpression
                                            literalConstant
                                              IntegerLiteral("0")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("prop")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("UByte")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("255")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        DOT(".")
        simpleIdentifier
          Identifier("myPlus")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("other")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    genericCallLikeComparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          thisExpression
                                            THIS("this")
                                additiveOperator
                                  ADD("+")
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          simpleIdentifier
                                            Identifier("other")
    semis
      NL("\n")
  EOF("<EOF>")
