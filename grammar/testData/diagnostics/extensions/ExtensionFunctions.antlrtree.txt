File: ExtensionFunctions.kt - dbedc9f690b2beed2940c5de0dd0c39b
  NL("\n")
  NL("\n")
  packageHeader
    PACKAGE("package")
    identifier
      simpleIdentifier
        Identifier("outer")
    semi
      NL("\n")
      NL("\n")
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          nullableType
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
            quest
              QUEST_NO_WS("?")
        DOT(".")
        simpleIdentifier
          Identifier("optint")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Unit")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        receiverType
          nullableType
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
            quest
              QUEST_NO_WS("?")
        DOT(".")
        variableDeclaration
          simpleIdentifier
            Identifier("optval")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Unit")
        getter
          GETTER("get")
          LPAREN("(")
          RPAREN(")")
          functionBody
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          simpleIdentifier
                                            Identifier("Unit")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
            COLON(":")
            type
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Any")
          COMMA(",")
          typeParameter
            simpleIdentifier
              Identifier("E")
          RANGLE(">")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("T")
              DOT(".")
              simpleUserType
                simpleIdentifier
                  Identifier("foo")
        LPAREN("(")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("UNUSED_PARAMETER")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("x")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("E")
        COMMA(",")
        Identifier("y")
        COLON(":")
        Identifier("A")
        RPAREN(")")
        COLON(":")
        Identifier("T")
        LCURL("{")
    semis
      NL("\n")
  Identifier("y")
  DOT(".")
  Identifier("plus")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  Identifier("y")
  Identifier("plus")
  IntegerLiteral("1")
  NL("\n")
  Identifier("y")
  ADD("+")
  RealLiteral("1.0")
  NL("\n")
  NL("\n")
  THIS("this")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNNECESSARY_SAFE_CALL")
  EXCL_NO_WS("!")
  RANGLE(">")
  QUEST_NO_WS("?")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("minus")
  LANGLE("<")
  Identifier("T")
  RANGLE(">")
  LPAREN("(")
  Identifier("this")
  RPAREN(")")
  NL("\n")
  NL("\n")
  RETURN("return")
  THIS("this")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        modifiers
          modifier
            functionModifier
              INFIX("infix")
          modifier
            functionModifier
              OPERATOR("operator")
        FUN("fun")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("A")
              DOT(".")
              simpleUserType
                simpleIdentifier
                  Identifier("plus")
        LPAREN("(")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("UNUSED_PARAMETER")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("a")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Any")
        RPAREN(")")
        LCURL("{")
    semis
      NL("\n")
      NL("\n")
  IntegerLiteral("1")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  BooleanLiteral("true")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_NO_INFORMATION_FOR_PARAMETER")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("foo")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NO_VALUE_FOR_PARAMETER")
  COMMA(",")
  Identifier("NO_VALUE_FOR_PARAMETER")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNUSED_EXPRESSION")
  EXCL_NO_WS("!")
  RANGLE(">")
  IntegerLiteral("1")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        modifiers
          modifier
            functionModifier
              OPERATOR("operator")
        FUN("fun")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("A")
              DOT(".")
              simpleUserType
                simpleIdentifier
                  Identifier("plus")
        LPAREN("(")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("UNUSED_PARAMETER")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("a")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Int")
        RPAREN(")")
        LCURL("{")
    semis
      NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNUSED_EXPRESSION")
  EXCL_NO_WS("!")
  RANGLE(">")
  IntegerLiteral("1")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        modifiers
          modifier
            functionModifier
              OPERATOR("operator")
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("T")
              DOT(".")
              simpleUserType
                simpleIdentifier
                  Identifier("minus")
        LPAREN("(")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("UNUSED_PARAMETER")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("t")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("T")
        RPAREN(")")
        COLON(":")
        Identifier("Int")
        ASSIGNMENT("=")
        IntegerLiteral("1")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          typeParameter
            simpleIdentifier
              Identifier("UNUSED_VARIABLE")
          EXCL_NO_WS("!")
          RANGLE(">")
        variableDeclaration
          simpleIdentifier
            Identifier("y")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        ASSIGNMENT("=")
        IntegerLiteral("1")
        DOT(".")
        Identifier("abs")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        DOT(".")
        variableDeclaration
          simpleIdentifier
            Identifier("abs")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
    semis
      NL("\n")
  GETTER("get")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IF("if")
  LPAREN("(")
  Identifier("this")
  RANGLE(">")
  IntegerLiteral("0")
  RPAREN(")")
  THIS("this")
  ELSE("else")
  SUB("-")
  THIS("this")
  SEMICOLON(";")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXTENSION_PROPERTY_MUST_HAVE_ACCESSORS_OR_BE_ABSTRACT")
  EXCL_NO_WS("!")
  RANGLE(">")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("T")
        DOT(".")
        variableDeclaration
          simpleIdentifier
            Identifier("foo")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("T")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        DOT(".")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        thisExpression
                                          THIS("this")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
  PACKAGE("package")
  Identifier("null_safety")
  NL("\n")
  NL("\n")
  IMPORT("import")
  Identifier("outer")
  DOT(".")
  MULT("*")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("parse")
        functionValueParameters
          LPAREN("(")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("UNUSED_PARAMETER")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("cmd")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("String")
  RPAREN(")")
  COLON(":")
  Identifier("Command")
  QUEST_WS("? ")
  LCURL("{")
  RETURN("return")
  NullLiteral("null")
  RCURL("}")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("Command")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
        classBody
          LCURL("{")
          NL("\n")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      Identifier("foo")
                    COLON(":")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Int")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("0")
                  NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Any")
        DOT(".")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("EXTENSION_SHADOWED_BY_MEMBER")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("equals")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        LPAREN("(")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("UNUSED_PARAMETER")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("other")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Any")
        QUEST_NO_WS("?")
        RPAREN(")")
        COLON(":")
        Identifier("Boolean")
        ASSIGNMENT("=")
        BooleanLiteral("true")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          nullableType
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Any")
            quest
              QUEST_NO_WS("?")
        DOT(".")
        simpleIdentifier
          Identifier("equals1")
        functionValueParameters
          LPAREN("(")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("UNUSED_PARAMETER")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("other")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        COLON(":")
        type
          nullableType
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Any")
            quest
              QUEST_NO_WS("?")
  RPAREN(")")
  COLON(":")
  Identifier("Boolean")
  ASSIGNMENT("=")
  BooleanLiteral("true")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Any")
              DOT(".")
              simpleUserType
                simpleIdentifier
                  Identifier("equals2")
        LPAREN("(")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("UNUSED_PARAMETER")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("other")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Any")
        QUEST_NO_WS("?")
        RPAREN(")")
        COLON(":")
        Identifier("Boolean")
        ASSIGNMENT("=")
        BooleanLiteral("true")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("main")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  Identifier("System")
  DOT(".")
  OUT("out")
  DOT(".")
  Identifier("print")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("command")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("parse")
                                    postfixUnarySuffix
                                      callSuffix
                                        valueArguments
                                          LPAREN("(")
                                          valueArgument
                                            expression
                                              disjunction
                                                conjunction
                                                  equality
                                                    comparison
                                                      infixOperation
                                                        elvisExpression
                                                          infixFunctionCall
                                                            rangeExpression
                                                              additiveExpression
                                                                multiplicativeExpression
                                                                  asExpression
                                                                    prefixUnaryExpression
                                                                      postfixUnaryExpression
                                                                        primaryExpression
                                                                          stringLiteral
                                                                            lineStringLiteral
                                                                              QUOTE_OPEN(""")
                                                                              QUOTE_CLOSE(""")
                                          RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  Identifier("command")
  DOT(".")
  Identifier("foo")
  NL("\n")
  NL("\n")
  Identifier("command")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNSAFE_CALL")
  EXCL_NO_WS("!")
  RANGLE(">")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("equals")
  LPAREN("(")
  NullLiteral("null")
  RPAREN(")")
  NL("\n")
  Identifier("command")
  QUEST_NO_WS("?")
  DOT(".")
  Identifier("equals")
  LPAREN("(")
  NullLiteral("null")
  RPAREN(")")
  NL("\n")
  Identifier("command")
  DOT(".")
  Identifier("equals1")
  LPAREN("(")
  NullLiteral("null")
  RPAREN(")")
  NL("\n")
  Identifier("command")
  QUEST_NO_WS("?")
  DOT(".")
  Identifier("equals1")
  LPAREN("(")
  NullLiteral("null")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("c")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("Command")
                                    postfixUnarySuffix
                                      callSuffix
                                        valueArguments
                                          LPAREN("(")
                                          RPAREN(")")
        NL("\n")
        Identifier("c")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("UNNECESSARY_SAFE_CALL")
        EXCL_NO_WS("!")
        RANGLE(">")
        QUEST_NO_WS("?")
        DOT(".")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("equals2")
        LPAREN("(")
        NullLiteral("null")
        RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("command")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNUSED_EXPRESSION")
  EXCL_NO_WS("!")
  RANGLE(">")
  IntegerLiteral("1")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  EOF("<EOF>")
