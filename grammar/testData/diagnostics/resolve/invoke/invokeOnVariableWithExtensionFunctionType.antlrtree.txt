File: invokeOnVariableWithExtensionFunctionType.kt - e62f999620c6d1de81af1bfd0d080ec4
  NL("\n")
  NL("\n")
  packageHeader
    PACKAGE("package")
    identifier
      simpleIdentifier
        Identifier("fooIsExtension")
    semi
      NL("\n")
      NL("\n")
  importList
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
    semis
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("B")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("A")
        DOT(".")
        variableDeclaration
          simpleIdentifier
            Identifier("foo")
          COLON(":")
          type
            functionType
              receiverType
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("B")
              DOT(".")
              functionTypeParameters
                LPAREN("(")
                RPAREN(")")
              ARROW("->")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Unit")
        getter
          GETTER("get")
          LPAREN("(")
          RPAREN(")")
          functionBody
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          functionLiteral
                                            lambdaLiteral
                                              LCURL("{")
                                              statements
                                              RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("A")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("b")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("B")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("b")
  DOT(".")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("b")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("b")
  DOT(".")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  LPAREN("(")
  Identifier("b")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("DEBUG_INFO_UNRESOLVED_WITH_TARGET")
  COMMA(",")
  Identifier("UNRESOLVED_REFERENCE_WRONG_RECEIVER")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("foo")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NO_VALUE_FOR_PARAMETER")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  Identifier("a")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("FUNCTION_EXPECTED")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("DEBUG_INFO_UNRESOLVED_WITH_TARGET")
  COMMA(",")
  Identifier("UNRESOLVED_REFERENCE_WRONG_RECEIVER")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("foo")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  Identifier("this")
  RPAREN(")")
  NL("\n")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  Identifier("this")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  PACKAGE("package")
  Identifier("fooIsMember")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      Identifier("foo")
                    COLON(":")
                    type
                      functionType
                        receiverType
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("B")
                        DOT(".")
                        functionTypeParameters
                          LPAREN("(")
                          RPAREN(")")
                        ARROW("->")
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("Unit")
                  getter
                    GETTER("get")
                    LPAREN("(")
                    RPAREN(")")
                    functionBody
                      ASSIGNMENT("=")
                      expression
                        disjunction
                          conjunction
                            equality
                              comparison
                                infixOperation
                                  elvisExpression
                                    infixFunctionCall
                                      rangeExpression
                                        additiveExpression
                                          multiplicativeExpression
                                            asExpression
                                              prefixUnaryExpression
                                                postfixUnaryExpression
                                                  primaryExpression
                                                    functionLiteral
                                                      lambdaLiteral
                                                        LCURL("{")
                                                        statements
                                                        RCURL("}")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("B")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("A")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("b")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("B")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("b")
  DOT(".")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("b")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("b")
  DOT(".")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("FUNCTION_EXPECTED")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  Identifier("b")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("FUNCTION_CALL_EXPECTED")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("foo")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NO_VALUE_FOR_PARAMETER")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  Identifier("a")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("FUNCTION_EXPECTED")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNRESOLVED_REFERENCE")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("foo")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  LPAREN("(")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  Identifier("this")
  RPAREN(")")
  NL("\n")
  Identifier("a")
  DOT(".")
  Identifier("foo")
  LPAREN("(")
  Identifier("this")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("with")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  EOF("<EOF>")
