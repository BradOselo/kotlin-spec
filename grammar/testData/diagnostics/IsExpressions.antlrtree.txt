File: IsExpressions.kt - fefd3a35993428818339dabe105d0cf0
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("USELESS_IS_CHECK")
  EXCL_NO_WS("!")
  RANGLE(">")
  IntegerLiteral("1")
  IS("is")
  Identifier("Int")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  IntegerLiteral("1")
  IS("is")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("INCOMPATIBLE_TYPES")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("Boolean")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("A")
  DOT(".")
  Identifier("create")
  LPAREN("(")
  RPAREN(")")
  IS("is")
  Identifier("A")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("USELESS_IS_CHECK")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("A")
  DOT(".")
  Identifier("create")
  LPAREN("(")
  RPAREN(")")
  IS("is")
  Identifier("A")
  QUEST_NO_WS("?")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNRESOLVED_REFERENCE")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("unresolved")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  IS("is")
  Identifier("A")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNRESOLVED_REFERENCE")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("unresolved")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  IS("is")
  Identifier("A")
  QUEST_NO_WS("?")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("x")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("foo")
                                    postfixUnarySuffix
                                      callSuffix
                                        valueArguments
                                          LPAREN("(")
                                          RPAREN(")")
        NL("\n")
        Identifier("x")
        AS("as")
        Identifier("String")
    semis
      NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("USELESS_IS_CHECK")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("x")
  IS("is")
  Identifier("String")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Any")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        stringLiteral
                                          lineStringLiteral
                                            QUOTE_OPEN(""")
                                            QUOTE_CLOSE(""")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
  LCURL("{")
  NL("\n")
  Identifier("static")
  Identifier("A")
  Identifier("create")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  RETURN("return")
  NullLiteral("null")
  SEMICOLON(";")
  RCURL("}")
  NL("\n")
  RCURL("}")
  EOF("<EOF>")
