File: functionLiteralWithoutArgumentList.kt - c865c3cc38c40ae6d3188c5ad176b1f0
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        simpleIdentifier
          Identifier("id")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("t")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            simpleIdentifier
              Identifier("t")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                declaration
                  propertyDeclaration
                    VAL("val")
                    variableDeclaration
                      simpleIdentifier
                        Identifier("i")
                    ASSIGNMENT("=")
                    expression
                      expression
                        simpleIdentifier
                          Identifier("id")
                      unarySuffix
                        callSuffix
                          annotatedLambda
                            lambdaLiteral
                              LCURL("{")
                              statements
                                statement
                                  expression
                                    literalConstant
                                      IntegerLiteral("22")
                              RCURL("}")
              semis
                NL("\n")
              statement
                expression
                  expression
                    simpleIdentifier
                      Identifier("i")
                  simpleIdentifier
                    Identifier("checkType")
                  expression
                    functionLiteral
                      lambdaLiteral
                        LCURL("{")
                        statements
                          statement
                            expression
                              expression
                                simpleIdentifier
                                  Identifier("_")
                              unarySuffix
                                typeArguments
                                  LANGLE("<")
                                  typeProjection
                                    type
                                      functionType
                                        functionTypeParameters
                                          LPAREN("(")
                                          RPAREN(")")
                                        ARROW("->")
                                        type
                                          typeReference
                                            userType
                                              simpleUserType
                                                simpleIdentifier
                                                  Identifier("Int")
                                  RANGLE(">")
                              unarySuffix
                                callSuffix
                                  valueArguments
                                    LPAREN("(")
                                    RPAREN(")")
                        RCURL("}")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
