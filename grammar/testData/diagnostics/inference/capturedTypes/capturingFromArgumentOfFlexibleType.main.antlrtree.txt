File: capturingFromArgumentOfFlexibleType.main.kt - e8aec809fbcfbaf5a82439e2205bea93
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("Foo")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        simpleIdentifier
          Identifier("id")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    genericCallLikeComparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          literalConstant
                                            NullLiteral("null")
                                    asOperator
                                      AS("as")
                                    type
                                      typeReference
                                        userType
                                          simpleUserType
                                            simpleIdentifier
                                              Identifier("T")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          genericCallLikeComparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                simpleIdentifier
                                                  Identifier("Test")
                                              postfixUnarySuffix
                                                navigationSuffix
                                                  memberAccessOperator
                                                    DOT(".")
                                                  simpleIdentifier
                                                    Identifier("getFoo")
                                              postfixUnarySuffix
                                                callSuffix
                                                  valueArguments
                                                    LPAREN("(")
                                                    RPAREN(")")
              semis
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          genericCallLikeComparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                simpleIdentifier
                                                  Identifier("id")
                                              postfixUnarySuffix
                                                callSuffix
                                                  valueArguments
                                                    LPAREN("(")
                                                    valueArgument
                                                      expression
                                                        disjunction
                                                          conjunction
                                                            equality
                                                              comparison
                                                                genericCallLikeComparison
                                                                  infixOperation
                                                                    elvisExpression
                                                                      infixFunctionCall
                                                                        rangeExpression
                                                                          additiveExpression
                                                                            multiplicativeExpression
                                                                              asExpression
                                                                                prefixUnaryExpression
                                                                                  postfixUnaryExpression
                                                                                    primaryExpression
                                                                                      simpleIdentifier
                                                                                        Identifier("Test")
                                                                                    postfixUnarySuffix
                                                                                      navigationSuffix
                                                                                        memberAccessOperator
                                                                                          DOT(".")
                                                                                        simpleIdentifier
                                                                                          Identifier("getFoo")
                                                                                    postfixUnarySuffix
                                                                                      callSuffix
                                                                                        valueArguments
                                                                                          LPAREN("(")
                                                                                          RPAREN(")")
                                                    RPAREN(")")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
