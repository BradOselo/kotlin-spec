File: ImportFromCompanionObject.kt - f8c9416b86efdd12810a3bbff7ef7f32
  NL("\n")
  packageHeader
    PACKAGE("package")
    identifier
      simpleIdentifier
        Identifier("a")
    semi
      NL("\n")
      NL("\n")
  importList
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("C1")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              companionObject
                COMPANION("companion")
                OBJECT("object")
                simpleIdentifier
                  Identifier("O")
                classBody
                  LCURL("{")
                  NL("\n")
                  classMemberDeclarations
                    classMemberDeclaration
                      declaration
                        classDeclaration
                          CLASS("class")
                          simpleIdentifier
                            Identifier("A")
                    semis
                      NL("\n")
                    classMemberDeclaration
                      declaration
                        objectDeclaration
                          OBJECT("object")
                          simpleIdentifier
                            Identifier("B")
                    semis
                      NL("\n")
                      NL("\n")
                    classMemberDeclaration
                      declaration
                        functionDeclaration
                          FUN("fun")
                          simpleIdentifier
                            Identifier("bar")
                          functionValueParameters
                            LPAREN("(")
                            RPAREN(")")
                          functionBody
                            block
                              LCURL("{")
                              statements
                              RCURL("}")
                    semis
                      NL("\n")
                  RCURL("}")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("C2")
  LCURL("{")
  NL("\n")
  COMPANION("companion")
  topLevelObject
    declaration
      objectDeclaration
        OBJECT("object")
        simpleIdentifier
          Identifier("S")
  LCURL("{")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("prop")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("String")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      stringLiteral
                                        lineStringLiteral
                                          QUOTE_OPEN(""")
                                          QUOTE_CLOSE(""")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("o")
        functionValueParameters
          LPAREN("(")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("UNUSED_PARAMETER")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("s")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("String")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("Unit")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("o")
        functionValueParameters
          LPAREN("(")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("UNUSED_PARAMETER")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("i")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("Unit")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        DOT(".")
        simpleIdentifier
          Identifier("ext")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        simpleIdentifier
                                          Identifier("Unit")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAR("var")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("String")
        DOT(".")
        variableDeclaration
          simpleIdentifier
            Identifier("ext")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
        NL("\n")
        getter
          GETTER("get")
          LPAREN("(")
          RPAREN(")")
          functionBody
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          literalConstant
                                            IntegerLiteral("3")
        NL("\n")
        setter
          SETTER("set")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNUSED_PARAMETER")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("i")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("A")
        functionValueParameters
          LPAREN("(")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("UNUSED_PARAMETER")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("c")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        simpleIdentifier
          Identifier("genericFun")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("t")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
          COMMA(",")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("UNUSED_PARAMETER")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("t2")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("T")
  RPAREN(")")
  COLON(":")
  Identifier("T")
  ASSIGNMENT("=")
  Identifier("t")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            inheritanceModifier
              OPEN("open")
        CLASS("class")
        simpleIdentifier
          Identifier("Base")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("f")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        simpleIdentifier
          Identifier("g")
        functionValueParameters
          LPAREN("(")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("UNUSED_PARAMETER")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("t")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("T")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("p")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("1")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        DOT(".")
        variableDeclaration
          simpleIdentifier
            Identifier("ext")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
    semis
      NL("\n")
  GETTER("get")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("4")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        INTERFACE("interface")
        simpleIdentifier
          Identifier("BaseI")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                functionDeclaration
                  FUN("fun")
                  simpleIdentifier
                    Identifier("fromI")
                  functionValueParameters
                    LPAREN("(")
                    RPAREN(")")
                  COLON(":")
                  type
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("Int")
                  functionBody
                    ASSIGNMENT("=")
                    expression
                      disjunction
                        conjunction
                          equality
                            comparison
                              infixOperation
                                elvisExpression
                                  infixFunctionCall
                                    rangeExpression
                                      additiveExpression
                                        multiplicativeExpression
                                          asExpression
                                            prefixUnaryExpression
                                              postfixUnaryExpression
                                                primaryExpression
                                                  literalConstant
                                                    IntegerLiteral("3")
            semis
              NL("\n")
              NL("\n")
            classMemberDeclaration
              declaration
                functionDeclaration
                  FUN("fun")
                  simpleIdentifier
                    Identifier("genericFromI")
                  functionValueParameters
                    LPAREN("(")
                    functionValueParameter
                      parameter
                        simpleIdentifier
                          Identifier("t")
                        COLON(":")
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("T")
                    RPAREN(")")
                  functionBody
                    ASSIGNMENT("=")
                    expression
                      disjunction
                        conjunction
                          equality
                            comparison
                              infixOperation
                                elvisExpression
                                  infixFunctionCall
                                    rangeExpression
                                      additiveExpression
                                        multiplicativeExpression
                                          asExpression
                                            prefixUnaryExpression
                                              postfixUnaryExpression
                                                primaryExpression
                                                  simpleIdentifier
                                                    Identifier("t")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("C3")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              companionObject
                COMPANION("companion")
                OBJECT("object")
                simpleIdentifier
                  Identifier("K")
                COLON(":")
                delegationSpecifiers
                  annotatedDelegationSpecifier
                    delegationSpecifier
                      constructorInvocation
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Base")
                        valueArguments
                          LPAREN("(")
                          RPAREN(")")
                  COMMA(",")
                  annotatedDelegationSpecifier
                    delegationSpecifier
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("BaseI")
                          typeArguments
                            LANGLE("<")
                            typeProjection
                              type
                                typeReference
                                  userType
                                    simpleUserType
                                      simpleIdentifier
                                        Identifier("Int")
                            RANGLE(">")
                classBody
                  LCURL("{")
                  NL("\n")
                  classMemberDeclarations
                    classMemberDeclaration
                      declaration
                        propertyDeclaration
                          VAL("val")
                          variableDeclaration
                            simpleIdentifier
                              Identifier("own")
                            COLON(":")
                            type
                              typeReference
                                userType
                                  simpleUserType
                                    simpleIdentifier
                                      Identifier("String")
                          ASSIGNMENT("=")
                          expression
                            disjunction
                              conjunction
                                equality
                                  comparison
                                    infixOperation
                                      elvisExpression
                                        infixFunctionCall
                                          rangeExpression
                                            additiveExpression
                                              multiplicativeExpression
                                                asExpression
                                                  prefixUnaryExpression
                                                    postfixUnaryExpression
                                                      primaryExpression
                                                        stringLiteral
                                                          lineStringLiteral
                                                            QUOTE_OPEN(""")
                                                            QUOTE_CLOSE(""")
                          NL("\n")
                  RCURL("}")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
  PACKAGE("package")
  Identifier("b")
  NL("\n")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C1")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("CANNOT_ALL_UNDER_IMPORT_FROM_SINGLETON")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("O")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  DOT(".")
  MULT("*")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("testErroneusAllUnderImportFromObject")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNRESOLVED_REFERENCE")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("A")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNRESOLVED_REFERENCE")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("B")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNRESOLVED_REFERENCE")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("bar")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  PACKAGE("package")
  Identifier("c")
  NL("\n")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C2")
  DOT(".")
  Identifier("S")
  DOT(".")
  Identifier("prop")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C2")
  DOT(".")
  Identifier("S")
  DOT(".")
  Identifier("o")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C2")
  DOT(".")
  Identifier("S")
  DOT(".")
  Identifier("ext")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C2")
  DOT(".")
  Identifier("S")
  DOT(".")
  Identifier("A")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C2")
  DOT(".")
  Identifier("S")
  DOT(".")
  Identifier("genericFun")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C2")
  DOT(".")
  Identifier("S")
  DOT(".")
  Identifier("ext")
  AS("as")
  Identifier("extRenamed")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("testImportFromObjectByName")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("prop")
  NL("\n")
  Identifier("o")
  LPAREN("(")
  QUOTE_OPEN(""")
  LineStrText("a")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  Identifier("o")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  IntegerLiteral("3")
  DOT(".")
  Identifier("ext")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  QUOTE_OPEN(""")
  QUOTE_CLOSE(""")
  DOT(".")
  Identifier("ext")
  ASSIGNMENT("=")
  IntegerLiteral("3")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          typeParameter
            simpleIdentifier
              Identifier("UNUSED_VARIABLE")
          EXCL_NO_WS("!")
          RANGLE(">")
        variableDeclaration
          simpleIdentifier
            Identifier("c")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Int")
        ASSIGNMENT("=")
        QUOTE_OPEN(""")
        QUOTE_CLOSE(""")
        DOT(".")
        Identifier("ext")
    semis
      NL("\n")
      NL("\n")
  IntegerLiteral("3")
  DOT(".")
  Identifier("extRenamed")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  QUOTE_OPEN(""")
  QUOTE_CLOSE(""")
  DOT(".")
  Identifier("extRenamed")
  ASSIGNMENT("=")
  IntegerLiteral("3")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          typeParameter
            simpleIdentifier
              Identifier("UNUSED_VARIABLE")
          EXCL_NO_WS("!")
          RANGLE(">")
        variableDeclaration
          simpleIdentifier
            Identifier("c2")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Int")
        ASSIGNMENT("=")
        QUOTE_OPEN(""")
        QUOTE_CLOSE(""")
        DOT(".")
        Identifier("extRenamed")
    semis
      NL("\n")
      NL("\n")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  Identifier("A")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          typeParameter
            simpleIdentifier
              Identifier("UNUSED_VARIABLE")
          EXCL_NO_WS("!")
          RANGLE(">")
        variableDeclaration
          simpleIdentifier
            Identifier("a")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Int")
        ASSIGNMENT("=")
        Identifier("genericFun")
        LPAREN("(")
        IntegerLiteral("3")
        COMMA(",")
        IntegerLiteral("3")
        RPAREN(")")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          typeParameter
            simpleIdentifier
              Identifier("UNUSED_VARIABLE")
          EXCL_NO_WS("!")
          RANGLE(">")
        variableDeclaration
          simpleIdentifier
            Identifier("s")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("String")
        ASSIGNMENT("=")
        Identifier("genericFun")
        LPAREN("(")
        QUOTE_OPEN(""")
        LineStrText("A")
        QUOTE_CLOSE(""")
        COMMA(",")
        QUOTE_OPEN(""")
        LineStrText("b")
        QUOTE_CLOSE(""")
        RPAREN(")")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          typeParameter
            simpleIdentifier
              Identifier("UNUSED_VARIABLE")
          EXCL_NO_WS("!")
          RANGLE(">")
        variableDeclaration
          simpleIdentifier
            Identifier("b")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COLON(":")
        Identifier("Boolean")
        ASSIGNMENT("=")
        Identifier("genericFun")
        LPAREN("(")
        BooleanLiteral("true")
        COMMA(",")
        BooleanLiteral("false")
        RPAREN(")")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        simpleIdentifier
          Identifier("t")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("t")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("T")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              jumpExpression
                                                RETURN("return")
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              simpleIdentifier
                                                                                Identifier("genericFun")
                                                                            postfixUnarySuffix
                                                                              callSuffix
                                                                                valueArguments
                                                                                  LPAREN("(")
                                                                                  valueArgument
                                                                                    expression
                                                                                      disjunction
                                                                                        conjunction
                                                                                          equality
                                                                                            comparison
                                                                                              infixOperation
                                                                                                elvisExpression
                                                                                                  infixFunctionCall
                                                                                                    rangeExpression
                                                                                                      additiveExpression
                                                                                                        multiplicativeExpression
                                                                                                          asExpression
                                                                                                            prefixUnaryExpression
                                                                                                              postfixUnaryExpression
                                                                                                                primaryExpression
                                                                                                                  simpleIdentifier
                                                                                                                    Identifier("t")
                                                                                  COMMA(",")
                                                                                  valueArgument
                                                                                    expression
                                                                                      disjunction
                                                                                        conjunction
                                                                                          equality
                                                                                            comparison
                                                                                              infixOperation
                                                                                                elvisExpression
                                                                                                  infixFunctionCall
                                                                                                    rangeExpression
                                                                                                      additiveExpression
                                                                                                        multiplicativeExpression
                                                                                                          asExpression
                                                                                                            prefixUnaryExpression
                                                                                                              postfixUnaryExpression
                                                                                                                primaryExpression
                                                                                                                  simpleIdentifier
                                                                                                                    Identifier("t")
                                                                                  RPAREN(")")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
  PACKAGE("package")
  Identifier("d")
  NL("\n")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C2")
  DOT(".")
  Identifier("S")
  DOT(".")
  Identifier("prop")
  AS("as")
  Identifier("renamed")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("testFunImportedFromObjectHasNoDispatchReceiver")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("l")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("a")
                    DOT(".")
                    simpleUserType
                      simpleIdentifier
                        Identifier("C2")
                    DOT(".")
                    simpleUserType
                      simpleIdentifier
                        Identifier("S")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("l")
  DOT(".")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNRESOLVED_REFERENCE")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("renamed")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  Identifier("l")
  DOT(".")
  Identifier("prop")
  NL("\n")
  Identifier("renamed")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  PACKAGE("package")
  Identifier("e")
  NL("\n")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C3")
  DOT(".")
  Identifier("K")
  DOT(".")
  Identifier("f")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C3")
  DOT(".")
  Identifier("K")
  DOT(".")
  Identifier("g")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C3")
  DOT(".")
  Identifier("K")
  DOT(".")
  Identifier("p")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C3")
  DOT(".")
  Identifier("K")
  DOT(".")
  Identifier("own")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C3")
  DOT(".")
  Identifier("K")
  DOT(".")
  Identifier("fromI")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C3")
  DOT(".")
  Identifier("K")
  DOT(".")
  Identifier("genericFromI")
  NL("\n")
  IMPORT("import")
  Identifier("a")
  DOT(".")
  Identifier("C3")
  DOT(".")
  Identifier("K")
  DOT(".")
  Identifier("ext")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("testMembersFromSupertypes")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("f")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  Identifier("g")
  LPAREN("(")
  QUOTE_OPEN(""")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  Identifier("p")
  NL("\n")
  Identifier("fromI")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("genericFromI")
  LPAREN("(")
  IntegerLiteral("3")
  RPAREN(")")
  NL("\n")
  Identifier("genericFromI")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  QUOTE_OPEN(""")
  LineStrText("a")
  QUOTE_CLOSE(""")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("own")
  NL("\n")
  RCURL("}")
  EOF("<EOF>")
