File: ReserveYield.kt - 5108a1337b05d55443c1e619cf9f2ec6
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
    PACKAGE("package")
    identifier
      simpleIdentifier
        Identifier("p1")
      DOT(".")
      simpleIdentifier
        Identifier("yield")
    semi
      NL("\n")
      NL("\n")
  importList
    importHeader
      IMPORT("import")
      identifier
        simpleIdentifier
          Identifier("p1")
        DOT(".")
        simpleIdentifier
          Identifier("yield")
        DOT(".")
        simpleIdentifier
          Identifier("yield")
      semi
        NL("\n")
    importHeader
      IMPORT("import")
      identifier
        simpleIdentifier
          Identifier("p1")
        DOT(".")
        simpleIdentifier
          Identifier("yield")
        DOT(".")
        simpleIdentifier
          Identifier("foo")
      semi
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("yield")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("5")
        NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("bar")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("yield")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          literalConstant
                                            IntegerLiteral("4")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("yield")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("yield")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  QUOTE_OPEN(""")
  LineStrText("$")
  LineStrText("<!YIELD_IS_RESERVED!>yield<!>")
  QUOTE_CLOSE(""")
  NL("\n")
  QUOTE_OPEN(""")
  LineStrExprStart("${")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("YIELD_IS_RESERVED")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("yield")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RCURL("}")
  QUOTE_CLOSE(""")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("YIELD_IS_RESERVED")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("yield")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("foo")
        ASSIGNMENT("=")
        LANGLE("<")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  unaryPrefix
                                    prefixUnaryOperator
                                      excl
                                        EXCL_NO_WS("!")
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("YIELD_IS_RESERVED")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("yield")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        ADD("+")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("YIELD_IS_RESERVED")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("yield")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("foo2")
        ASSIGNMENT("=")
        LANGLE("<")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  unaryPrefix
                                    prefixUnaryOperator
                                      excl
                                        EXCL_NO_WS("!")
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("YIELD_IS_RESERVED")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("yield")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
    semis
      NL("\n")
      NL("\n")
  Identifier("bar")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("YIELD_IS_RESERVED")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("yield")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  ASSIGNMENT("=")
  IntegerLiteral("5")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("yield")
  LPAREN("(")
  IntegerLiteral("4")
  RPAREN(")")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("YIELD_IS_RESERVED")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("yield")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("yield")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
            COLON(":")
            LANGLE("<")
            EXCL_NO_WS("!")
            Identifier("YIELD_IS_RESERVED")
            EXCL_NO_WS("!")
          RANGLE(">")
  Identifier("yield")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LANGLE("<")
  Identifier("T")
  RANGLE(">")
  RANGLE(">")
  NL("\n")
  NL("\n")
  IdentifierAt("return@")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("YIELD_IS_RESERVED")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("yield")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  IdentifierAt("return@")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("YIELD_IS_RESERVED")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("yield")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("Unit")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("foo5")
          COLON(":")
          LANGLE("<")
          EXCL_NO_WS("!")
          Identifier("YIELD_IS_RESERVED")
          EXCL_NO_WS("!")
          RANGLE(">")
          Identifier("yield")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
          LANGLE("<")
          MULT("*")
          RANGLE(">")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("yield")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("i")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Int")
                    RPAREN(")")
                  ARROW("->")
                  type
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("Unit")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
      NL("\n")
  PACKAGE("package")
  Identifier("p2")
  DOT(".")
  Identifier("yield")
  NL("\n")
  NL("\n")
  IMPORT("import")
  Identifier("p2")
  DOT(".")
  Identifier("yield")
  DOT(".")
  Identifier("yield")
  NL("\n")
  IMPORT("import")
  Identifier("p2")
  DOT(".")
  Identifier("yield")
  DOT(".")
  Identifier("foo")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("yield")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("5")
        NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("bar")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("yield")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          literalConstant
                                            IntegerLiteral("4")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("yield")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("yield")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              stringLiteral
                                                lineStringLiteral
                                                  QUOTE_OPEN(""")
                                                  lineStringContent
                                                    LineStrRef("$`yield`")
                                                  QUOTE_CLOSE(""")
              semis
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              stringLiteral
                                                lineStringLiteral
                                                  QUOTE_OPEN(""")
                                                  lineStringExpression
                                                    LineStrExprStart("${")
                                                    expression
                                                      disjunction
                                                        conjunction
                                                          equality
                                                            comparison
                                                              infixOperation
                                                                elvisExpression
                                                                  infixFunctionCall
                                                                    rangeExpression
                                                                      additiveExpression
                                                                        multiplicativeExpression
                                                                          asExpression
                                                                            prefixUnaryExpression
                                                                              postfixUnaryExpression
                                                                                primaryExpression
                                                                                  simpleIdentifier
                                                                                    Identifier("`yield`")
                                                    RCURL("}")
                                                  QUOTE_CLOSE(""")
              semis
                NL("\n")
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              simpleIdentifier
                                                Identifier("`yield`")
              semis
                NL("\n")
              statement
                declaration
                  propertyDeclaration
                    VAL("val")
                    variableDeclaration
                      simpleIdentifier
                        Identifier("foo")
                    ASSIGNMENT("=")
                    expression
                      disjunction
                        conjunction
                          equality
                            comparison
                              infixOperation
                                elvisExpression
                                  infixFunctionCall
                                    rangeExpression
                                      additiveExpression
                                        multiplicativeExpression
                                          asExpression
                                            prefixUnaryExpression
                                              postfixUnaryExpression
                                                primaryExpression
                                                  simpleIdentifier
                                                    Identifier("`yield`")
                                        additiveOperator
                                          ADD("+")
                                        multiplicativeExpression
                                          asExpression
                                            prefixUnaryExpression
                                              postfixUnaryExpression
                                                primaryExpression
                                                  simpleIdentifier
                                                    Identifier("`yield`")
              semis
                NL("\n")
              statement
                declaration
                  propertyDeclaration
                    VAL("val")
                    variableDeclaration
                      simpleIdentifier
                        Identifier("foo2")
                    ASSIGNMENT("=")
                    expression
                      disjunction
                        conjunction
                          equality
                            comparison
                              infixOperation
                                elvisExpression
                                  infixFunctionCall
                                    rangeExpression
                                      additiveExpression
                                        multiplicativeExpression
                                          asExpression
                                            prefixUnaryExpression
                                              postfixUnaryExpression
                                                primaryExpression
                                                  simpleIdentifier
                                                    Identifier("`yield`")
                    NL("\n")
              semis
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              simpleIdentifier
                                                Identifier("bar")
                                            postfixUnarySuffix
                                              callSuffix
                                                valueArguments
                                                  LPAREN("(")
                                                  valueArgument
                                                    simpleIdentifier
                                                      Identifier("`yield`")
                                                    ASSIGNMENT("=")
                                                    expression
                                                      disjunction
                                                        conjunction
                                                          equality
                                                            comparison
                                                              infixOperation
                                                                elvisExpression
                                                                  infixFunctionCall
                                                                    rangeExpression
                                                                      additiveExpression
                                                                        multiplicativeExpression
                                                                          asExpression
                                                                            prefixUnaryExpression
                                                                              postfixUnaryExpression
                                                                                primaryExpression
                                                                                  literalConstant
                                                                                    IntegerLiteral("5")
                                                  RPAREN(")")
              semis
                NL("\n")
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              simpleIdentifier
                                                Identifier("`yield`")
                                            postfixUnarySuffix
                                              callSuffix
                                                valueArguments
                                                  LPAREN("(")
                                                  valueArgument
                                                    expression
                                                      disjunction
                                                        conjunction
                                                          equality
                                                            comparison
                                                              infixOperation
                                                                elvisExpression
                                                                  infixFunctionCall
                                                                    rangeExpression
                                                                      additiveExpression
                                                                        multiplicativeExpression
                                                                          asExpression
                                                                            prefixUnaryExpression
                                                                              postfixUnaryExpression
                                                                                primaryExpression
                                                                                  literalConstant
                                                                                    IntegerLiteral("4")
                                                  RPAREN(")")
              semis
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              simpleIdentifier
                                                Identifier("`yield`")
                                            postfixUnarySuffix
                                              callSuffix
                                                annotatedLambda
                                                  lambdaLiteral
                                                    LCURL("{")
                                                    statements
                                                    RCURL("}")
              semis
                NL("\n")
                NL("\n")
              statement
                declaration
                  classDeclaration
                    CLASS("class")
                    simpleIdentifier
                      Identifier("`yield`")
                    typeParameters
                      LANGLE("<")
                      typeParameter
                        simpleIdentifier
                          Identifier("T")
                        COLON(":")
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("`yield`")
                                typeArguments
                                  LANGLE("<")
                                  typeProjection
                                    type
                                      typeReference
                                        userType
                                          simpleUserType
                                            simpleIdentifier
                                              Identifier("T")
                                  RANGLE(">")
                      RANGLE(">")
              semis
                NL("\n")
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              jumpExpression
                                                RETURN_AT("return@`yield`")
              semis
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              jumpExpression
                                                RETURN_AT("return@`yield`")
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              simpleIdentifier
                                                                                Identifier("Unit")
              semis
                NL("\n")
                NL("\n")
              statement
                declaration
                  propertyDeclaration
                    VAL("val")
                    variableDeclaration
                      simpleIdentifier
                        Identifier("foo5")
                      COLON(":")
                      type
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("`yield`")
                              typeArguments
                                LANGLE("<")
                                typeProjection
                                  MULT("*")
                                RANGLE(">")
                    NL("\n")
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("yield")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("i")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Int")
                    RPAREN(")")
                  ARROW("->")
                  type
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("Unit")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
