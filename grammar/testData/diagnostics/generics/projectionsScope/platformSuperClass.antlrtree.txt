File: platformSuperClass.kt
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            visibilityModifier
              PUBLIC("public")
        CLASS("class")
        simpleIdentifier
          Identifier("Clazz")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("T")
      Identifier("getT")
      LPAREN("(")
      RPAREN(")")
      LCURL("{")
      RETURN("return")
      NullLiteral("null")
    semis
      SEMICOLON(";")
  RCURL("}")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("Clazz")
      LANGLE("<")
      QUEST_WS("? ")
      SUPER("super")
      Identifier("T")
      RANGLE(">")
      Identifier("getSuperClass")
      LPAREN("(")
      RPAREN(")")
      LCURL("{")
      RETURN("return")
      NullLiteral("null")
    semis
      SEMICOLON(";")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("clazz")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Clazz")
                      typeArguments
                        LANGLE("<")
                        typeProjection
                          MULT("*")
                        RANGLE(">")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("clazz")
  DOT(".")
  Identifier("t")
  Identifier("checkType")
  LCURL("{")
  Identifier("_")
  LANGLE("<")
  Identifier("Any")
  QUEST_NO_WS("?")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RCURL("}")
  NL("\n")
  Identifier("clazz")
  DOT(".")
  Identifier("getSuperClass")
  LPAREN("(")
  RPAREN(")")
  Identifier("checkType")
  LCURL("{")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("DEBUG_INFO_UNRESOLVED_WITH_TARGET")
  COMMA(",")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("UNRESOLVED_REFERENCE_WRONG_RECEIVER")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("_")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LANGLE("<")
  Identifier("Clazz")
  LANGLE("<")
  MULT("*")
  RANGLE(">")
  QUEST_NO_WS("?")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RCURL("}")
  NL("\n")
  Identifier("clazz")
  DOT(".")
  Identifier("getSuperClass")
  LPAREN("(")
  RPAREN(")")
  DOT(".")
  Identifier("t")
  Identifier("checkType")
  LCURL("{")
  Identifier("_")
  LANGLE("<")
  Identifier("Any")
  QUEST_NO_WS("?")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("clazz")
  DOT(".")
  Identifier("superClass")
  Identifier("checkType")
  LCURL("{")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("DEBUG_INFO_UNRESOLVED_WITH_TARGET")
  COMMA(",")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("UNRESOLVED_REFERENCE_WRONG_RECEIVER")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("_")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LANGLE("<")
  Identifier("Clazz")
  LANGLE("<")
  MULT("*")
  RANGLE(">")
  QUEST_NO_WS("?")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RCURL("}")
  NL("\n")
  Identifier("clazz")
  DOT(".")
  Identifier("superClass")
  DOT(".")
  Identifier("t")
  Identifier("checkType")
  LCURL("{")
  Identifier("_")
  LANGLE("<")
  Identifier("Any")
  QUEST_NO_WS("?")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("clazz")
  DOT(".")
  Identifier("superClass")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  THROW("throw")
  Identifier("NullPointerException")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  EOF("<EOF>")
