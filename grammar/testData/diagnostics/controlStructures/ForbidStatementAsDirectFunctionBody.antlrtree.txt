File: ForbidStatementAsDirectFunctionBody.kt - 4de5fd651bc11d7239192201a0ff99a1 (WITH_ERRORS)
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo1")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          WHILE("while")
          expression
            expression
              parenthesizedExpression
                LPAREN("(")
                expression
                  expression
                    simpleIdentifier
                      Identifier("b")
                  unarySuffix
                    callSuffix
                      valueArguments
                        LPAREN("(")
                        RPAREN(")")
                RPAREN(")")
            unarySuffix
              callSuffix
                annotatedLambda
                  lambdaLiteral
                    LCURL("{")
                    statements
                    RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo2")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          FOR("for")
          expression
            expression
              parenthesizedExpression
                LPAREN("(")
                expression
                  expression
                    simpleIdentifier
                      Identifier("i")
                  inOperator
                    IN("in")
                  expression
                    literalConstant
                      IntegerLiteral("10")
                RPAREN(")")
            unarySuffix
              callSuffix
                annotatedLambda
                  lambdaLiteral
                    LCURL("{")
                    statements
                    RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo3")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            whenExpression
              WHEN("when")
              whenSubject
                LPAREN("(")
                expression
                  expression
                    simpleIdentifier
                      Identifier("b")
                  unarySuffix
                    callSuffix
                      valueArguments
                        LPAREN("(")
                        RPAREN(")")
                RPAREN(")")
              LCURL("{")
              NL("\n")
              whenEntry
                whenCondition
                  expression
                    literalConstant
                      BooleanLiteral("true")
                ARROW("->")
                controlStructureBody
                  statement
                    expression
                      literalConstant
                        IntegerLiteral("1")
                semi
                  NL("\n")
              whenEntry
                ELSE("else")
                ARROW("->")
                controlStructureBody
                  statement
                    expression
                      literalConstant
                        IntegerLiteral("0")
                semi
                  NL("\n")
              RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("b")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Boolean")
        functionBody
          ASSIGNMENT("=")
          expression
            literalConstant
              BooleanLiteral("true")
    semis
      EOF("<EOF>")
  EOF("<EOF>")
