File: RedundantElse.kt - 52c55db465acb6eee6dabf386d0fa05c
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
  topLevelObject
    declaration
      ENUM("enum")
      Identifier("MyEnum")
      LCURL("{")
    semis
      NL("\n")
  Identifier("SINGLE")
  SEMICOLON(";")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("static")
      Identifier("MyEnum")
      Identifier("getInstance")
      LPAREN("(")
      RPAREN(")")
      LCURL("{")
    semis
      NL("\n")
  RETURN("return")
  Identifier("SINGLE")
  SEMICOLON(";")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            classModifier
              SEALED("sealed")
        CLASS("class")
        simpleIdentifier
          Identifier("X")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                classDeclaration
                  CLASS("class")
                  simpleIdentifier
                    Identifier("A")
                  COLON(":")
                  delegationSpecifiers
                    annotatedDelegationSpecifier
                      delegationSpecifier
                        constructorInvocation
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("X")
                          valueArguments
                            LPAREN("(")
                            RPAREN(")")
            semis
              NL("\n")
            classMemberDeclaration
              declaration
                classDeclaration
                  CLASS("class")
                  simpleIdentifier
                    Identifier("B")
                  COLON(":")
                  delegationSpecifiers
                    annotatedDelegationSpecifier
                      delegationSpecifier
                        constructorInvocation
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("X")
                          valueArguments
                            LPAREN("(")
                            RPAREN(")")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("X")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      WHEN("when")
                                      LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IS("is")
  Identifier("X")
  DOT(".")
  Identifier("A")
  ARROW("->")
  LCURL("{")
  RCURL("}")
  NL("\n")
  IS("is")
  Identifier("X")
  DOT(".")
  Identifier("B")
  ARROW("->")
  LCURL("{")
  RCURL("}")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("REDUNDANT_ELSE_IN_WHEN")
  EXCL_NO_WS("!")
  RANGLE(">")
  ELSE("else")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  ARROW("->")
  LCURL("{")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("bar")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("X")
  QUEST_NO_WS("?")
  RPAREN(")")
  COLON(":")
  Identifier("String")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IS("is")
  Identifier("X")
  DOT(".")
  Identifier("A")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("A")
  QUOTE_CLOSE(""")
  NL("\n")
  IS("is")
  Identifier("X")
  DOT(".")
  Identifier("B")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("B")
  QUOTE_CLOSE(""")
  NL("\n")
  NullLiteral("null")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("null")
  QUOTE_CLOSE(""")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("REDUNDANT_ELSE_IN_WHEN")
  EXCL_NO_WS("!")
  RANGLE(">")
  ELSE("else")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("Unreachable")
  QUOTE_CLOSE(""")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("justUse")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("X")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  WHEN("when")
  LPAREN("(")
  Identifier("x")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IS("is")
  Identifier("X")
  DOT(".")
  Identifier("A")
  ARROW("->")
  LCURL("{")
  RCURL("}")
  NL("\n")
  IS("is")
  Identifier("X")
  DOT(".")
  Identifier("B")
  ARROW("->")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("REDUNDANT_ELSE_IN_WHEN")
  EXCL_NO_WS("!")
  RANGLE(">")
  ELSE("else")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  ARROW("->")
  LCURL("{")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  ENUM("enum")
  CLASS("class")
  Identifier("E")
  LCURL("{")
  NL("\n")
  Identifier("A")
  COMMA(",")
  Identifier("B")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("e")
  COLON(":")
  Identifier("E")
  RPAREN(")")
  COLON(":")
  Identifier("String")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("e")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("E")
  DOT(".")
  Identifier("A")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("A")
  QUOTE_CLOSE(""")
  NL("\n")
  Identifier("E")
  DOT(".")
  Identifier("B")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("B")
  QUOTE_CLOSE(""")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("REDUNDANT_ELSE_IN_WHEN")
  EXCL_NO_WS("!")
  RANGLE(">")
  ELSE("else")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  ARROW("->")
  QUOTE_OPEN(""")
  QUOTE_CLOSE(""")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("bar")
  LPAREN("(")
  Identifier("e")
  COLON(":")
  Identifier("E")
  QUEST_NO_WS("?")
  RPAREN(")")
  COLON(":")
  Identifier("String")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("e")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("E")
  DOT(".")
  Identifier("A")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("A")
  QUOTE_CLOSE(""")
  NL("\n")
  Identifier("E")
  DOT(".")
  Identifier("B")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("B")
  QUOTE_CLOSE(""")
  NL("\n")
  ELSE("else")
  ARROW("->")
  QUOTE_OPEN(""")
  QUOTE_CLOSE(""")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  Identifier("b")
  COLON(":")
  Identifier("Boolean")
  RPAREN(")")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  BooleanLiteral("true")
  ARROW("->")
  IntegerLiteral("1")
  NL("\n")
  BooleanLiteral("false")
  ARROW("->")
  IntegerLiteral("0")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("REDUNDANT_ELSE_IN_WHEN")
  EXCL_NO_WS("!")
  RANGLE(">")
  ELSE("else")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  ARROW("->")
  SUB("-")
  IntegerLiteral("1")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("useJava")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("String")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("me")
  ASSIGNMENT("=")
  Identifier("MyEnum")
  DOT(".")
  Identifier("getInstance")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RETURN("return")
  WHEN("when")
  LPAREN("(")
  Identifier("me")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("MyEnum")
  DOT(".")
  Identifier("SINGLE")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("OK")
  QUOTE_CLOSE(""")
  NL("\n")
  ELSE("else")
  ARROW("->")
  QUOTE_OPEN(""")
  LineStrText("FAIL")
  QUOTE_CLOSE(""")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
