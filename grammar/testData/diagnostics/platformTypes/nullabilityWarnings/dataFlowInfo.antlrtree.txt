File: dataFlowInfo.kt - ec9b5ceff8855bf94389a163e39c3228
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
    importHeader
      IMPORT("import")
      identifier
        simpleIdentifier
          Identifier("org")
        DOT(".")
        simpleIdentifier
          Identifier("jetbrains")
        DOT(".")
        simpleIdentifier
          Identifier("annotations")
      DOT(".")
      MULT("*")
      semi
        SEMICOLON(";")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            visibilityModifier
              PUBLIC("public")
        CLASS("class")
        simpleIdentifier
          Identifier("J")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
      Identifier("NotNull")
    semis
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("static")
      Identifier("J")
      Identifier("staticNN")
    semis
      SEMICOLON(";")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
      Identifier("Nullable")
    semis
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PUBLIC("public")
      Identifier("static")
      Identifier("J")
      Identifier("staticN")
    semis
      SEMICOLON(";")
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("n")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
        Identifier("J")
        DOT(".")
        Identifier("staticN")
    semis
      NL("\n")
  Identifier("foo")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("n")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  Identifier("J")
  DOT(".")
  Identifier("staticNN")
  ASSIGNMENT("=")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("n")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("n")
  EXCL_EQ("!=")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("DEBUG_INFO_SMARTCAST")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("n")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  Identifier("J")
  DOT(".")
  Identifier("staticNN")
  ASSIGNMENT("=")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("DEBUG_INFO_SMARTCAST")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("n")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("x")
          COLON(":")
          type
            nullableType
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("J")
              quest
                QUEST_WS("? ")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        NullLiteral("null")
    semis
      NL("\n")
  Identifier("J")
  DOT(".")
  Identifier("staticNN")
  ASSIGNMENT("=")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("NI")
  SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("x")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("x")
  EXCL_EQ("!=")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("J")
  DOT(".")
  Identifier("staticNN")
  ASSIGNMENT("=")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("DEBUG_INFO_SMARTCAST")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("x")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("j")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("J")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      EOF("<EOF>")
  EOF("<EOF>")
