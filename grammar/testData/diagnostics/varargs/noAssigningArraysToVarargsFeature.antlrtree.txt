File: noAssigningArraysToVarargsFeature.kt - 7840ddeff0b54057d7ed4b7f66a8ef78
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
  topLevelObject
    declaration
      classDeclaration
        INTERFACE("interface")
        simpleIdentifier
          Identifier("JavaAnn")
  LCURL("{")
  NL("\n")
  Identifier("String")
  LSQUARE("[")
  RSQUARE("]")
  Identifier("value")
  LPAREN("(")
  RPAREN(")")
  Identifier("default")
  LCURL("{")
  RCURL("}")
  SEMICOLON(";")
  NL("\n")
  Identifier("String")
  LSQUARE("[")
  RSQUARE("]")
  Identifier("path")
  LPAREN("(")
  RPAREN(")")
  Identifier("default")
  LCURL("{")
  RCURL("}")
  SEMICOLON(";")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            classModifier
              ANNOTATION("annotation")
        CLASS("class")
        simpleIdentifier
          Identifier("Ann")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              modifiers
                modifier
                  parameterModifier
                    VARARG("vararg")
              VAL("val")
              simpleIdentifier
                Identifier("s")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("String")
            RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("Ann")
      LPAREN("(")
      Identifier("s")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("NI")
    semis
      SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_EXPECTED_TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("arrayOf")
  LPAREN("(")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test1")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("Ann")
      LPAREN("(")
      Identifier("s")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("TYPE_MISMATCH")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("intArrayOf")
      LPAREN("(")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      RPAREN(")")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test2")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("Ann")
      LPAREN("(")
      Identifier("s")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("NI")
    semis
      SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_EXPECTED_TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("arrayOf")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test3")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("Ann")
      LPAREN("(")
      Identifier("s")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("NI")
    semis
      SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_EXPECTED_TYPE_MISMATCH")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  LSQUARE("[")
  QUOTE_OPEN(""")
  LineStrText("value")
  QUOTE_CLOSE(""")
  RSQUARE("]")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test5")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("JavaAnn")
      LPAREN("(")
      Identifier("value")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("NI")
    semis
      SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_EXPECTED_TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("arrayOf")
  LPAREN("(")
  QUOTE_OPEN(""")
  LineStrText("value")
  QUOTE_CLOSE(""")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("jTest1")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("JavaAnn")
      LPAREN("(")
      Identifier("value")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("NI")
    semis
      SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_EXPECTED_TYPE_MISMATCH")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  LSQUARE("[")
  QUOTE_OPEN(""")
  LineStrText("value")
  QUOTE_CLOSE(""")
  RSQUARE("]")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("jTest2")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("JavaAnn")
      LPAREN("(")
      Identifier("value")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("NI")
    semis
      SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_EXPECTED_TYPE_MISMATCH")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  LSQUARE("[")
  QUOTE_OPEN(""")
  LineStrText("value")
  QUOTE_CLOSE(""")
  RSQUARE("]")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  COMMA(",")
  Identifier("path")
  ASSIGNMENT("=")
  LSQUARE("[")
  QUOTE_OPEN(""")
  LineStrText("path")
  QUOTE_CLOSE(""")
  RSQUARE("]")
  RPAREN(")")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("jTest3")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            classModifier
              ANNOTATION("annotation")
        CLASS("class")
        simpleIdentifier
          Identifier("IntAnn")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              modifiers
                modifier
                  parameterModifier
                    VARARG("vararg")
              VAL("val")
              simpleIdentifier
                Identifier("i")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("IntAnn")
      LPAREN("(")
      Identifier("i")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("NI")
    semis
      SEMICOLON(";")
  Identifier("TYPE_MISMATCH")
  COMMA(",")
  Identifier("OI")
  SEMICOLON(";")
  Identifier("TYPE_INFERENCE_EXPECTED_TYPE_MISMATCH")
  COMMA(",")
  Identifier("TYPE_MISMATCH")
  EXCL_NO_WS("!")
  RANGLE(">")
  LSQUARE("[")
  IntegerLiteral("1")
  COMMA(",")
  IntegerLiteral("2")
  RSQUARE("]")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo1")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT_PRE_WS("\n@")
      Identifier("IntAnn")
      LPAREN("(")
      Identifier("i")
      ASSIGNMENT("=")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("TYPE_MISMATCH")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("intArrayOf")
      LPAREN("(")
      IntegerLiteral("0")
      RPAREN(")")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      RPAREN(")")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo2")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
  topLevelObject
    declaration
  topLevelObject
    declaration
      VARARG("vararg")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("UNUSED_PARAMETER")
      EXCL_NO_WS("!")
      RANGLE(">")
      Identifier("i")
      LANGLE("<")
      EXCL_NO_WS("!")
      RANGLE(">")
      COLON(":")
      Identifier("Int")
      RPAREN(")")
      LCURL("{")
      RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        modifiers
          annotation
            singleAnnotation
              AT_PRE_WS("\n@")
              unescapedAnnotation
                constructorInvocation
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Ann")
                  valueArguments
                    LPAREN("(")
                    valueArgument
                      simpleIdentifier
                        Identifier("s")
                      ASSIGNMENT("=")
                      expression
                        disjunction
                          conjunction
                            equality
                              comparison
                                infixOperation
                                  elvisExpression
                                    infixFunctionCall
                                      rangeExpression
                                        additiveExpression
                                          multiplicativeExpression
                                            asExpression
                                              prefixUnaryExpression
                                                postfixUnaryExpression
                                                  primaryExpression
                                                    stringLiteral
                                                      lineStringLiteral
                                                        QUOTE_OPEN(""")
                                                        lineStringContent
                                                          LineStrText("value")
                                                        QUOTE_CLOSE(""")
                    RPAREN(")")
            NL("\n")
        FUN("fun")
        simpleIdentifier
          Identifier("dep1")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              simpleIdentifier
                                                Identifier("foo")
                                            postfixUnarySuffix
                                              callSuffix
                                                valueArguments
                                                  LPAREN("(")
                                                  valueArgument
                                                    simpleIdentifier
                                                      Identifier("i")
                                                    ASSIGNMENT("=")
                                                    expression
                                                      disjunction
                                                        conjunction
                                                          equality
                                                            comparison
                                                              infixOperation
                                                                elvisExpression
                                                                  infixFunctionCall
                                                                    rangeExpression
                                                                      additiveExpression
                                                                        multiplicativeExpression
                                                                          asExpression
                                                                            prefixUnaryExpression
                                                                              postfixUnaryExpression
                                                                                primaryExpression
                                                                                  literalConstant
                                                                                    IntegerLiteral("1")
                                                  RPAREN(")")
              semis
                NL("\n")
            RCURL("}")
    semis
      EOF("<EOF>")
  EOF("<EOF>")
