File: headerClassWithFunctionBody.kt - 4f7167d0c1dc109573075b9e0b852234
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            platformModifier
              EXPECT("expect")
        CLASS("class")
        simpleIdentifier
          Identifier("Foo")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXPECTED_CLASS_CONSTRUCTOR_PROPERTY_PARAMETER")
  EXCL_NO_WS("!")
  RANGLE(">")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("constructorProperty")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("String")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        COMMA(",")
        Identifier("constructorParameter")
        COLON(":")
        Identifier("String")
        RPAREN(")")
        LCURL("{")
    semis
      NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXPECTED_DECLARATION_WITH_BODY")
  EXCL_NO_WS("!")
  RANGLE(">")
  INIT("init")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LCURL("{")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNUSED_EXPRESSION")
  COMMA(",")
  Identifier("UNUSED_EXPRESSION")
  EXCL_NO_WS("!")
  RANGLE(">")
  QUOTE_OPEN(""")
  LineStrText("no")
  QUOTE_CLOSE(""")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXPECTED_DECLARATION_WITH_BODY")
  EXCL_NO_WS("!")
  RANGLE(">")
  CONSTRUCTOR("constructor")
  LPAREN("(")
  Identifier("s")
  COLON(":")
  Identifier("String")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LCURL("{")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNUSED_EXPRESSION")
  EXCL_NO_WS("!")
  RANGLE(">")
  QUOTE_OPEN(""")
  LineStrText("no")
  QUOTE_CLOSE(""")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  CONSTRUCTOR("constructor")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXPECTED_CLASS_CONSTRUCTOR_DELEGATION_CALL")
  EXCL_NO_WS("!")
  RANGLE(">")
  THIS("this")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LPAREN("(")
  QUOTE_OPEN(""")
  LineStrText("no")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("prop")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("String")
        ASSIGNMENT("=")
        LANGLE("<")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  unaryPrefix
                                    prefixUnaryOperator
                                      excl
                                        EXCL_NO_WS("!")
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("EXPECTED_PROPERTY_INITIALIZER")
        EXCL_NO_WS("!")
        RANGLE(">")
        QUOTE_OPEN(""")
        LineStrText("no")
        QUOTE_CLOSE(""")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAR("var")
        variableDeclaration
          simpleIdentifier
            Identifier("getSet")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("String")
    semis
      NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXPECTED_DECLARATION_WITH_BODY")
  EXCL_NO_WS("!")
  RANGLE(">")
  GETTER("get")
  LPAREN("(")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  ASSIGNMENT("=")
  QUOTE_OPEN(""")
  LineStrText("no")
  QUOTE_CLOSE(""")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXPECTED_DECLARATION_WITH_BODY")
  EXCL_NO_WS("!")
  RANGLE(">")
  SETTER("set")
  LPAREN("(")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("UNUSED_PARAMETER")
  EXCL_NO_WS("!")
  RANGLE(">")
  Identifier("value")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  RPAREN(")")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("EXPECTED_DECLARATION_WITH_BODY")
  EXCL_NO_WS("!")
  RANGLE(">")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("functionWithBody")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
  LANGLE("<")
  EXCL_NO_WS("!")
  RANGLE(">")
  LCURL("{")
  NL("\n")
  RETURN("return")
  Identifier("x")
  ADD("+")
  IntegerLiteral("1")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  EOF("<EOF>")
