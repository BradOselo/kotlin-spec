File: expectDeclarationWithWeakIncompatibilities.kt - 55b8dbeb98b9c975de211bfba516ae66
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            platformModifier
              EXPECT("expect")
        CLASS("class")
        simpleIdentifier
          Identifier("Foo1")
    semis
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            platformModifier
              EXPECT("expect")
        CLASS("class")
        simpleIdentifier
          Identifier("Foo2")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        modifiers
          modifier
            platformModifier
              EXPECT("expect")
        FUN("fun")
        simpleIdentifier
          Identifier("foo2")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        modifiers
          modifier
            platformModifier
              EXPECT("expect")
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("s")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("String")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            platformModifier
              EXPECT("expect")
          modifier
            inheritanceModifier
              OPEN("open")
        CLASS("class")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("JVM")
        COLON(":")
        Identifier("PACKAGE_OR_CLASSIFIER_REDECLARATION")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("Foo3")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
      NL("\n")
      NL("\n")
      NL("\n")
  LANGLE("<")
  EXCL_NO_WS("!")
  Identifier("ACTUAL_WITHOUT_EXPECT")
  EXCL_NO_WS("!")
  RANGLE(">")
  topLevelObject
    declaration
      classDeclaration
        INTERFACE("interface")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("Foo1")
    semis
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      ACTUAL("actual")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("ACTUAL_WITHOUT_EXPECT")
      EXCL_NO_WS("!")
      RANGLE(">")
  topLevelObject
    declaration
      classDeclaration
        INTERFACE("interface")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("Foo2")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      ACTUAL("actual")
      LANGLE("<")
      EXCL_NO_WS("!")
      Identifier("ACTUAL_WITHOUT_EXPECT")
      EXCL_NO_WS("!")
      RANGLE(">")
  topLevelObject
    declaration
      propertyDeclaration
        VAR("var")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
        variableDeclaration
          simpleIdentifier
            Identifier("s")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("String")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      stringLiteral
                                        lineStringLiteral
                                          QUOTE_OPEN(""")
                                          lineStringContent
                                            LineStrText("value")
                                          QUOTE_CLOSE(""")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          EXCL_NO_WS("!")
          typeParameter
            simpleIdentifier
              Identifier("ACTUAL_MISSING")
          EXCL_NO_WS("!")
          RANGLE(">")
        receiverType
          Identifier("foo2")
          LANGLE("<")
          EXCL_NO_WS("!")
          RANGLE(">")
          LPAREN("(")
          RPAREN(")")
          COLON(":")
          Identifier("Int")
          ASSIGNMENT("=")
          IntegerLiteral("0")
        NL("\n")
        NL("\n")
        DOT("<missing '.'>")
        simpleIdentifier
          ACTUAL("actual")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("ACTUAL_WITHOUT_EXPECT")
        COMMA(",")
        Identifier("PACKAGE_OR_CLASSIFIER_REDECLARATION")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("Foo3")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        LANGLE("<")
        EXCL_NO_WS("!")
        Identifier("ACTUAL_WITHOUT_EXPECT")
        COMMA(",")
        Identifier("PACKAGE_OR_CLASSIFIER_REDECLARATION")
        EXCL_NO_WS("!")
        RANGLE(">")
        Identifier("Foo3")
        LANGLE("<")
        EXCL_NO_WS("!")
        RANGLE(">")
    semis
      NL("\n")
  EOF("<EOF>")
